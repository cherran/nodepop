#!/usr/bin/env node

/**
 * Module dependencies.
 */

// Carga las variables de entorno definidas en el archivo .env de la ra√≠z del proyecto
require('dotenv').config();


var app = require('../app');
var debug = require('debug')('nodeapi:server');
var http = require('http');

const cluster = require('cluster');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '7000');
app.set('port', port);


/**
 * Control de cluster ////////////////////////////////////////////////////////////////////
 */
if (cluster.isMaster) {
    const numCPUs = require('os').cpus().length;

    for (let i =  0; i < numCPUs; i++){
        cluster.fork();
        var server = http.createServer(app);
    }
} else { // soy un clon!!
    /**
     * Create HTTP server.
     */

    var server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

}

// al arrancar un worker...
cluster.on('online', function(worker) {
    debug('Worker ' + worker.id +
    ' is online with pid ' + worker.process.pid);
});
  
// al terminar un worker...
cluster.on('exit', function(worker) {
    debug('worker ' + worker.process.pid + ' died');
    cluster.fork();
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
    case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
    default:
        throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
